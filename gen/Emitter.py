# -*- coding: UTF-8 -*-

import pywidl

import os.path



forwards = { \
  'CSSRuleList' : ('CSSRule', ),
  'CSSStyleRule' : ('CSSStyleDeclaration', ),
  'CSSStyleSheet' : ('CSSRule', ),
}



includes = { \
  'CSSNamespaceRule' : ('CSSRule', ),
  'CSSStyleRule' : ('CSSRule', ),
  'CSSRuleList' : ('Sequence', ),
  'CSSStyleSheet' : ('CSSRuleList', ),
}



def emitSimpleType(typedef):
  if typedef.type == typedef.DOMSTRING:
    return "const char *"
  elif typedef.type == typedef.VOID:
    assert(not typedef.nullable)
    return "void"
  elif typedef.type == typedef.SHORT:
    assert(not typedef.nullable)
    return "short"
  elif typedef.type == typedef.UNSIGNED_SHORT:
    assert(not typedef.nullable)
    return "unsigned short"
  elif typedef.type == typedef.LONG:
    assert(not typedef.nullable)
    return "long"
  elif typedef.type == typedef.UNSIGNED_LONG:
    assert(not typedef.nullable)
    return "unsigned long"
  elif typedef.type == typedef.LONG_LONG:
    assert(not typedef.nullable)
    return "long long"
  elif typedef.type == typedef.UNSIGNED_LONG_LONG:
    assert(not typedef.nullable)
    return "unsigned long long"
  else:
    raise RuntimeError("Unknown simple type: %s" % typedef.type)



def splitCamelCase(ident):
  assert(' ' not in ident)

  if not ident: return ident

  words = []
  word = []


  pch = ''
  for ch in ident:
    if pch.isupper() and ch.islower():
      words.append(''.join(word))
      word = [pch]
    else:
      word.append(pch)

    pch = ch

  word.append(ch)
  words.append(''.join(word))

  return words



def capitalizeCamelCase(ident):
  return "_".join([word.upper() for word in splitCamelCase(ident)])



def instanceName(className):
  words = splitCamelCase(className)
  words[0] = words[0].lower()

  return "".join(words)



def headerDefine(prefix, name, suffix):
  return "%s_%s_%s" % ( \
    capitalizeCamelCase(prefix),
    capitalizeCamelCase(name),
    capitalizeCamelCase(suffix))



def renderWarning(out, source):
    print >>out
    print >>out
    print >>out
    print >>out, "/**"
    print >>out, " * WARNING: DO NOT EDIT!!!"
    print >>out, " *"
    print >>out, " * Generated by PyWIdl from '%s'" % os.path.basename(source)
    print >>out, " */"
    print >>out
    print >>out
